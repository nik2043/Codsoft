import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load data
from google.colab import files
uploaded = files.upload()


# Convert labels to binary
import pandas as pd

data = pd.read_csv('spam.csv', encoding='latin-1')[['v1', 'v2']]
data.columns = ['label', 'message']
data.head()


# Check nulls
data.isnull().sum()

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(data['message'], data['label'], test_size=0.2, random_state=42)

# Convert text to TF-IDF features
vectorizer = TfidfVectorizer(stop_words='english', lowercase=True)
X_train_tf = vectorizer.fit_transform(X_train)
X_test_tf = vectorizer.transform(X_test)

nb = MultinomialNB()
nb.fit(X_train_tf, y_train)
nb_pred = nb.predict(X_test_tf)


lr = LogisticRegression()
lr.fit(X_train_tf, y_train)
lr_pred = lr.predict(X_test_tf)


svm = LinearSVC()
svm.fit(X_train_tf, y_train)
svm_pred = svm.predict(X_test_tf)

# Evaluation function
def evaluate_model(name, y_true, y_pred):
    print(f"\nModel: {name}")
    print("Accuracy:", accuracy_score(y_true, y_pred))
    print("Classification Report:\n", classification_report(y_true, y_pred))
    cm = confusion_matrix(y_true, y_pred)
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f"Confusion Matrix - {name}")
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.show()

# Evaluate all models
evaluate_model("Naive Bayes", y_test, nb_pred)
evaluate_model("Logistic Regression", y_test, lr_pred)
evaluate_model("SVM", y_test, svm_pred)


def predict_message(msg):
    msg_tf = vectorizer.transform([msg])
    prediction = svm.predict(msg_tf)
    return "Spam" if prediction[0] == 1 else "Not Spam"

# Test
print(predict_message("Congratulations! You've won a $1000 Walmart gift card."))
print(predict_message("Hey, are we still meeting at 5 today?"))
